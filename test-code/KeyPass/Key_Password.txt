#include "Keypad.h"

//int r = 9;  int g = 10;   int b = 11;

int limit = 5;
char pass[9] = { '*', '*', '*', '*', '*' };
char password[9] = { '0', '0', '0', '0', '0' };
int count = 0;
int countChangePassword = 0;
int toReset = 2;
boolean check;
char key;
 
const byte ROWS = 4; //four rows
const byte COLS = 3; //three columns
char keys[ROWS][COLS] = {
  {'1','2','3'},
  {'4','5','6'},
  {'7','8','9'},
  {'*','0','#'}
};
byte rowPins[ROWS] = {8, 7, 6, 5}; //connect to the row pinouts of the keypad
byte colPins[COLS] = {4, 3, 2}; //connect to the column pinouts of the keypad
 
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);
 
void setup()
{
  Serial.begin(9600);
  //pinMode(r, OUTPUT);  pinMode(g, OUTPUT);  pinMode(b, OUTPUT);
  Serial.println("WELCOME! :)");
  
}
 
void loop()
{   
  check = false;
  key = keypad.getKey();
  if(toReset == 2 && key == '*'){
    Serial.println("******* Reset Password *******");
    Serial.print("Enter Password : ");
    
    //เช็ครหัสก่อน   
    if(limit != 0){
      for(int i=0; i<=limit; i++){
        key = keypad.getKey();
        while(key == NO_KEY){
          key = keypad.getKey();  
        }
        if(key == '#' && i<limit)   break;
        inPass(key);
        count = enterPassword(key, i);    
        if(key == '*')  i = -1;  
      }
    }else{
      key = keypad.getKey();
      while(key == NO_KEY){
        key = keypad.getKey();  
      }
      if(key != '#'){  
        check = false; 
      }else{
        check = true;
      }
      
    }
    
    Serial.println("Check Password");
    
    //ถ้ารหัสถูกให้รีเซ็ตรหัส
    if(key == '#'){
      if(check == true ){      
        showPassword();  
        //รหัสกี่ตัว limit
        Serial.print("How many codes? [<9] : ");        
        setLimit();
        Serial.println(limit);
        
        //ตั้งรหัส for ตามจน.limit
        if(limit != 0){
          Serial.println("Reset Password");
          Serial.println("Enter New Password");
          for(int i=0; i<limit; i++){
            resetPassword(i);          
          }
        }
        Serial.println("\nReset Complete!\nNew ");
        showPassword();
                
      } count = 0;
    }
  }else if ( key != NO_KEY ){
    inPass(key);   
    count = enterPassword(key, count);    
    //ประตูเปิด
    if(check){
      Serial.println("Door Open!!!");
    }
  }else{
    //Serial.println("WELCOMEEEEE!!");
    /*do{
      key = keypad.getKey();
    }while(key == NO_KEY);*/
  }

}

//รับรหัส
void inPass(char key){
    //Serial.print("Enter: ");
    Serial.print(key);
    //Serial.println(count+1);   
}

//แสดงรหัส
void showPassword(){
  Serial.print("Password : ");
  for(int i=0; i<limit; i++){
    Serial.print(password[i]);      
  }
  Serial.println();
}

//ตรวจรหัส
boolean checkPassword( ){
  int n = 0;
  if(count == limit){
    for(int i = 0; i<limit; i++){
      if(pass[i] == password[i]){
        n++;
      }
    }
  }
  Serial.print("n: "); 
  Serial.println(n); 
  Serial.print("count: "); 
  Serial.println(count);
  
  if(limit == 0 && count != 0){
    Serial.println("XXXXXXXXXXXXXXX Incorrect XXXXXXXXXXXXXXXXXX");
    return false;
  }else if(n == limit){
    Serial.println("--------------- Correct!! ------------------");
    return true;
  }else{
    Serial.println("XXXXXXXXXXXXXXX Incorrect XXXXXXXXXXXXXXXXXX");
    return false;
  }
}

//ตั้งรหัส
void resetPassword(int count){
  key = keypad.getKey();
  while(key == NO_KEY){
    key = keypad.getKey();  
  }
  Serial.print(key);
  switch(key){
      case '1': 
        password[count] = '1'; 
        break;
      case '2': 
        password[count] = '2'; 
        break;
      case '3': 
        password[count] = '3'; 
        break;
      case '4': 
        password[count] = '4'; 
        break;
      case '5': 
        password[count] = '5'; 
        break;
      case '6': 
        password[count] = '6'; 
        break;
      case '7': 
        password[count] = '7';
        break;
      case '8': 
        password[count] = '8'; 
        break;
      case '9': 
        password[count] = '9'; 
        break;
      case '0': 
        password[count] = '0'; 
        break;
      case '*': //Delete รหัสเพื่อใส่ใหม่
        Serial.println("Delete"); 
        resetPassword(count);        
        break;
    }  
}

//รับรหัส
int enterPassword(char Key, int Count){
  switch(Key){
      case '1': 
        pass[Count] = '1'; 
        Count++; 
        break;
      case '2': 
        pass[Count] = '2'; 
        Count++; 
        break;
      case '3': 
        pass[Count] = '3'; 
        Count++; 
        break;
      case '4': 
        pass[Count] = '4'; 
        Count++; 
        break;
      case '5': 
        pass[Count] = '5'; 
        Count++; 
        break;
      case '6': 
        pass[Count] = '6'; 
        Count++; 
        break;
      case '7': 
        pass[Count] = '7';
        Count++; 
        break;
      case '8': 
        pass[Count] = '8'; 
        Count++; 
        break;
      case '9': 
        pass[Count] = '9'; 
        Count++; 
        break;
      case '0': 
        pass[Count] = '0'; 
        Count++; 
        break;
      case '*': //Delete รหัสเพื่อใส่ใหม่
        Count = 0;      
        Serial.println("Delete"); 
        break;
      case '#': //ตรวจรหัส
        check = checkPassword();  
        Count = 0;      
        break;
    }  
    return Count;
}

//ตั้งความยาวรหัส
void setLimit(){
  key = keypad.getKey();
  while(key == NO_KEY){
    key = keypad.getKey();  
  }
  switch(key){
      case '1': 
        limit = 1;
        break;
      case '2': 
        limit = 2; 
        break;
      case '3': 
        limit = 3;  
        break;
      case '4': 
        limit = 4; 
        break;
      case '5': 
        limit = 5; 
        break;
      case '6': 
        limit = 6; 
        break;
      case '7': 
        limit = 7; 
        break;
      case '8': 
        limit = 8; 
        break;
      case '9': 
        limit = 9; 
        break;
      case '0': 
        limit = 0; 
        break;
      default:
        setLimit();
        break;
  }  
}

/*
void keyLED(){
  analogWrite(r, LOW);
  analogWrite(g, HIGH);
  analogWrite(b, LOW);
}

void lowLED(){
  analogWrite(r, LOW);
  analogWrite(g, LOW);
  analogWrite(b, LOW);   
}

void correctLED(){
  analogWrite(r, HIGH);
  analogWrite(g, HIGH);
  analogWrite(b, HIGH);   
  delay(3000);
}
*/